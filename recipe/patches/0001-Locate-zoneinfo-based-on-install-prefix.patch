From a5dfe7eeb885bbfe68992efb8c3d821954b6bb04 Mon Sep 17 00:00:00 2001
From: Austin Morton <austin.morton@aquatic.com>
Date: Wed, 16 Oct 2024 14:35:42 +0000
Subject: [PATCH] Locate zoneinfo based on install prefix

Patch based on https://github.com/conda-forge/ctng-compilers-feedstock/blob/1484ff49f71cac78580cbf6c4aab350b2415cf49/recipe/patches/0003-patch-zoneinfo_dir_override-to-point-to-our-tzdata.patch
---
 CMakeLists.txt    |   4 +-
 include/date/tz.h |   6 --
 src/tz.cpp        | 149 +++++++++++++++++++++++++++-------------------
 3 files changed, 91 insertions(+), 68 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a430a23..4c7701e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -135,7 +135,7 @@ if( BUILD_TZ_LIB )
           src/ios.mm )
     endif()
     add_library( date::date-tz ALIAS date-tz )
-    target_link_libraries( date-tz PUBLIC date )
+    target_link_libraries( date-tz PUBLIC date ${CMAKE_DL_LIBS} )
     target_include_directories( date-tz PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> )
@@ -146,7 +146,7 @@ if( BUILD_TZ_LIB )
       target_compile_definitions( date-tz PRIVATE AUTO_DOWNLOAD=1 HAS_REMOTE_API=1 )
     endif()
 
-    if ( USE_SYSTEM_TZ_DB AND NOT WIN32 AND NOT MANUAL_TZ_DB )
+    if ( USE_SYSTEM_TZ_DB AND NOT MANUAL_TZ_DB )
       target_compile_definitions( date-tz PRIVATE INSTALL=. PUBLIC USE_OS_TZDB=1 )
     else()
       target_compile_definitions( date-tz PUBLIC USE_OS_TZDB=0 )
diff --git a/include/date/tz.h b/include/date/tz.h
index f056849..52f3f13 100644
--- a/include/date/tz.h
+++ b/include/date/tz.h
@@ -82,12 +82,6 @@ static_assert(HAS_REMOTE_API == 0 ? AUTO_DOWNLOAD == 0 : true,
 #  define USE_SHELL_API 1
 #endif
 
-#if USE_OS_TZDB
-#  ifdef _WIN32
-#    error "USE_OS_TZDB can not be used on Windows"
-#  endif
-#endif
-
 #ifndef HAS_DEDUCTION_GUIDES
 #  if __cplusplus >= 201703
 #    define HAS_DEDUCTION_GUIDES 1
diff --git a/src/tz.cpp b/src/tz.cpp
index 15c9f5d..ff9d9f8 100644
--- a/src/tz.cpp
+++ b/src/tz.cpp
@@ -152,6 +152,7 @@ struct index_entry_t {
 #  endif
 
 #  include <io.h> // _unlink etc.
+#  include <intrin.h>
 
 #  if defined(__clang__)
     struct IUnknown;    // fix for issue with static_cast<> in objbase.h
@@ -178,6 +179,7 @@ struct index_entry_t {
 #    include <sys/wait.h>
 #    include <sys/types.h>
 #  endif //!USE_SHELL_API
+#  include <dlfcn.h>
 #endif  // !_WIN32
 
 
@@ -478,63 +480,76 @@ CONSTCD14 const sys_seconds min_seconds = sys_days(min_year/min_day);
 
 #endif  // USE_OS_TZDB
 
-#ifndef _WIN32
-
 static
 std::string
 discover_tz_dir()
 {
-    struct stat sb;
-    using namespace std;
-#  if defined(ANDROID) || defined(__ANDROID__)
-    CONSTDATA auto tz_dir_default = "/apex/com.android.tzdata/etc/tz";
-    CONSTDATA auto tz_dir_fallback = "/system/usr/share/zoneinfo";
-
-    // Check updatable path first
-    if(stat(tz_dir_default, &sb) == 0 && S_ISDIR(sb.st_mode))
-        return tz_dir_default;
-    else if(stat(tz_dir_fallback, &sb) == 0 && S_ISDIR(sb.st_mode))
-        return tz_dir_fallback;
-    else
-        throw runtime_error("discover_tz_dir failed to find zoneinfo\n");
-#  elif !defined(__APPLE__)
-    CONSTDATA auto tz_dir_default = "/usr/share/zoneinfo";
-    CONSTDATA auto tz_dir_buildroot = "/usr/share/zoneinfo/uclibc";
-
-    // Check special path which is valid for buildroot with uclibc builds
-    if(stat(tz_dir_buildroot, &sb) == 0 && S_ISDIR(sb.st_mode))
-        return tz_dir_buildroot;
-    else if(stat(tz_dir_default, &sb) == 0 && S_ISDIR(sb.st_mode))
-        return tz_dir_default;
-    else
-        throw runtime_error("discover_tz_dir failed to find zoneinfo\n");
-#  else  // __APPLE__
-#      if TARGET_OS_IPHONE
-#          if TARGET_OS_SIMULATOR
-    return "/usr/share/zoneinfo";
-#          else
-    return "/var/db/timezone/zoneinfo";
-#          endif
-#      else
-    CONSTDATA auto timezone = "/etc/localtime";
-    if (!(lstat(timezone, &sb) == 0 && S_ISLNK(sb.st_mode) && sb.st_size > 0))
-        throw runtime_error("discover_tz_dir failed\n");
-    string result;
-    unique_ptr<char[]> rp(new char[sb.st_size]);
-    const auto rp_length = readlink(timezone, rp.get(), sb.st_size);
-    if (rp_length > 0)
-        result = string(rp.get(), rp_length); // readlink doesn't null-terminate
-    else
-        throw system_error(errno, system_category(), "readlink() failed");
-    auto i = result.find("zoneinfo");
-    if (i == string::npos)
-        throw runtime_error("discover_tz_dir failed to find zoneinfo\n");
-    i = result.find('/', i);
-    if (i == string::npos)
-        throw runtime_error("discover_tz_dir failed to find '/'\n");
-    return result.substr(0, i);
-#      endif
-#  endif  // __APPLE__
+    // get path to library we're in, to determine our location relative to $PREFIX;
+    // with help from the MIT-licensed https://github.com/gpakosz/whereami
+    void* addr =
+#ifdef _WIN32
+    _ReturnAddress()
+#else
+    __builtin_extract_return_addr(__builtin_return_address(0))
+#endif
+    ;
+    char* this_lib;
+    int i;
+    static std::string tz_dir;
+    if (!tz_dir.empty()) {
+      return tz_dir;
+    }
+#ifdef _WIN32
+    char buffer[MAX_PATH];
+    HMODULE hm = NULL;
+    // non-zero return means success
+    if (GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS |
+                          GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
+                          (LPCSTR) addr, &hm)) {
+      // returns length of string (not counting null byte), see
+      // https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamew#return-value
+      DWORD total_length = GetModuleFileNameA(hm, buffer, sizeof(buffer));
+      if (total_length) {
+        this_lib = (char*)malloc(total_length + 1);
+        memcpy(this_lib, buffer, total_length);
+#else
+    char buffer[PATH_MAX];
+    Dl_info info;
+
+    if (dladdr(addr, &info)) {
+      char* resolved = realpath(info.dli_fname, buffer);
+      if (resolved) {
+        int total_length = (int)strlen(resolved);
+        this_lib = (char*)malloc(total_length + 1);
+        memcpy(this_lib, resolved, total_length);
+#endif
+
+        for (i = (int)total_length - 1; i >= 0; --i) {
+          if (this_lib[i] == folder_delimiter) {
+            // set to null byte so the string ends before the basename
+            this_lib[i] = '\0';
+            break;
+          }
+        }
+        std::string tmp{this_lib};
+        tmp += folder_delimiter;
+        tmp += "..";
+        tmp += folder_delimiter;
+#ifdef _WIN32
+        tmp += "..";
+        tmp += folder_delimiter;
+#endif
+        tmp += "share";
+        tmp += folder_delimiter;
+        tmp += "zoneinfo";
+        // std::string constructor for tz_dir deep-copies
+        free(this_lib);
+        tz_dir = tmp;
+        return tz_dir;
+      }
+    }
+
+    throw std::runtime_error("failed to resolve conda zoneinfo path");
 }
 
 static
@@ -545,8 +560,6 @@ get_tz_dir()
     return tz_dir;
 }
 
-#endif
-
 // +-------------------+
 // | End Configuration |
 // +-------------------+
@@ -678,8 +691,6 @@ parse_month(std::istream& in)
 }
 #endif // !defined(ANDROID) && !defined(__ANDROID__)
 
-#if !USE_OS_TZDB
-
 #ifdef _WIN32
 
 static
@@ -733,6 +744,12 @@ native_to_standard_timezone_name(const std::string& native_tz_name,
     return false;
 }
 
+#endif
+
+#if !USE_OS_TZDB
+
+#ifdef _WIN32
+
 // Parse this XML file:
 // https://raw.githubusercontent.com/unicode-org/cldr/master/common/supplemental/windowsZones.xml
 // The parsing method is designed to be simple and quick. It is not overly
@@ -1917,9 +1934,15 @@ time_zone::time_zone(const std::string& s, detail::undocumented)
 
 enum class endian
 {
+#ifdef _WIN32
+    little = 0,
+    big = 1,
+    native = little
+#else
     native = __BYTE_ORDER__,
     little = __ORDER_LITTLE_ENDIAN__,
     big    = __ORDER_BIG_ENDIAN__
+#endif
 };
 
 static
@@ -2229,8 +2252,8 @@ time_zone::init_impl()
 #endif // defined(ANDROID) || defined(__ANDROID__)
     using namespace std;
     using namespace std::chrono;
-    auto name = get_tz_dir() + ('/' + name_);
-    std::ifstream inf(name);
+    auto name = get_tz_dir() + (folder_delimiter + name_);
+    std::ifstream inf(name, std::ios::in | std::ios::binary);
     if (!inf.is_open())
         throw std::runtime_error{"Unable to open " + name};
     inf.exceptions(std::ios::failbit | std::ios::badbit);
@@ -4022,7 +4045,13 @@ locate_zone(std::string_view tz_name)
 locate_zone(const std::string& tz_name)
 #endif
 {
-    return get_tzdb().locate_zone(tz_name);
+    #if _WIN32 && USE_OS_TZDB
+        std::string local_tz_name(tz_name);
+        std::replace(local_tz_name.begin(), local_tz_name.end(), '/', '\\');
+        return get_tzdb().locate_zone(local_tz_name);
+    #else
+        return get_tzdb().locate_zone(tz_name);
+    #endif
 }
 
 #if USE_OS_TZDB
-- 
2.43.2

